// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HeartrateJS.Collections.Measurement = (function(_super) {

    __extends(Measurement, _super);

    function Measurement() {
      this._enqueueDataPoint = __bind(this._enqueueDataPoint, this);
      return Measurement.__super__.constructor.apply(this, arguments);
    }

    Measurement.prototype.model = HeartrateJS.Models.DataPoint;

    Measurement.prototype.initialize = function(options) {
      var _this = this;
      this.set = new Orange.JobSet;
      this.set.on('complete', function() {
        return _this.trigger('calculated');
      });
      this.on('add', this._enqueueDataPoint);
      return this.on('change', function() {
        return this._peaks = null;
      });
    };

    Measurement.prototype.calculate = function() {
      return this.set.perform();
    };

    Measurement.prototype.toNumber = function() {
      var meanDurationMax, meanDurationMin;
      meanDurationMin = this._averageDistance(this.peaks('min'));
      meanDurationMax = this._averageDistance(this.peaks('max'));
      return 60000 / ((meanDurationMin + meanDurationMax) / 2);
    };

    Measurement.prototype.toHighchartsSeries = function(name) {
      var data;
      data = this.map(function(model) {
        return [model.get('timestamp'), model.get('intensity')];
      });
      return {
        name: name,
        data: data
      };
    };

    Measurement.prototype.peaks = function(method, repetitions, span, isRepitition) {
      var compare, peaking, _ref,
        _this = this;
      if (method == null) {
        method = 'min';
      }
      if (repetitions == null) {
        repetitions = 5;
      }
      if (span == null) {
        span = 5;
      }
      if (isRepitition == null) {
        isRepitition = false;
      }
      _ref = [{}, []], this._peaks = _ref[0], peaking = _ref[1];
      compare = function(a, b) {
        if (method === 'min') {
          return a < b;
        } else {
          return a > b;
        }
      };
      this.models.forEach(function(m, i) {
        var peak, section;
        section = _this.models.slice(i, span + i);
        peak = _.first(section);
        section.forEach(function(model, j) {
          if (compare(model.get('intensity'), peak.get('intensity'))) {
            return peak = model;
          }
        });
        return peaking.push(peak);
      });
      this._peaks[method] = new HeartrateJS.Collections.Measurement(peaking);
      if (repetitions > 1) {
        this._peaks[method] = this._peaks[method].peaks(method, --repetitions, span, true);
      }
      return this._peaks[method];
    };

    Measurement.prototype._averageDistance = function(peaks) {
      var sumDuration,
        _this = this;
      sumDuration = 0;
      peaks.forEach(function(model, i) {
        var nextTimestamp, timestamp;
        timestamp = model.get('timestamp');
        if (i !== peaks.length - 1) {
          nextTimestamp = peaks.at(i + 1).get('timestamp');
          return sumDuration += nextTimestamp - timestamp;
        }
      });
      return sumDuration / (peaks.length - 1);
    };

    Measurement.prototype._enqueueDataPoint = function(dataPoint) {
      return this.set.push(dataPoint.enqueue());
    };

    return Measurement;

  })(Backbone.Collection);

}).call(this);
