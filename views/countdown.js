// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HeartrateJS.Views.Countdown = (function(_super) {

    __extends(Countdown, _super);

    function Countdown() {
      this._count = __bind(this._count, this);
      return Countdown.__super__.constructor.apply(this, arguments);
    }

    Countdown.prototype.el = '#container';

    Countdown.prototype.initialize = function() {
      return this.template = _.template($('#tmpl-countdown').text());
    };

    Countdown.prototype.render = function() {
      this.$el.html(this.template());
      this._setupCountdown();
      return this;
    };

    Countdown.prototype._setupCountdown = function() {
      this.start = (new Date).getTime();
      this.interval = setInterval(this._count, 50);
      return this.$counter = this.$el.find('#counter');
    };

    Countdown.prototype._count = function() {
      var diff, duration, now;
      now = (new Date).getTime();
      diff = now - this.start;
      duration = HeartrateJS.Settings.countdownDuration;
      this.$counter.text(Math.round((duration - diff) / 1000));
      if (diff >= duration) {
        this.trigger('complete');
        return clearInterval(this.interval);
      }
    };

    return Countdown;

  })(Backbone.View);

}).call(this);
