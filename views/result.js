// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HeartrateJS.Views.Result = (function(_super) {

    __extends(Result, _super);

    function Result() {
      this._updateViaSlider = __bind(this._updateViaSlider, this);
      return Result.__super__.constructor.apply(this, arguments);
    }

    Result.prototype.el = '#container';

    Result.prototype.events = {
      'change .span': '_updateViaSlider',
      'change .repetitions': '_updateViaSlider'
    };

    Result.prototype.initialize = function() {
      this.template = _.template($('#tmpl-result').text());
      this.span = 5;
      return this.repetitions = 5;
    };

    Result.prototype.render = function() {
      this.$el.html(this.template(this._templateData()));
      this._renderChart([this.collection.toHighchartsSeries('Intensity')]);
      this._highlightPeaks(this.collection.peaks('max', this.repetitions, this.span), '#00ff00');
      return this;
    };

    Result.prototype._templateData = function() {
      return {
        rate: this.collection.toNumber(),
        span: this.span,
        repetitions: this.repetitions
      };
    };

    Result.prototype._updateViaSlider = function(e) {
      var $input, property, value;
      $input = $(e.currentTarget);
      property = $input.attr('name');
      value = $input.val();
      this[property] = value;
      $input.parent('label').find('span').text(value);
      return this.render();
    };

    Result.prototype._renderChart = function(series) {
      return this.chart = new Highcharts.Chart({
        chart: {
          renderTo: 'graph'
        },
        yAxis: {
          title: {
            text: 'Intensity'
          }
        },
        xAxis: {
          title: {
            text: 'Timestamp (ms)'
          }
        },
        plotOptions: {
          series: {
            marker: {
              enabled: false
            }
          }
        },
        series: series
      });
    };

    Result.prototype._highlightPeaks = function(peaks, color) {
      var peakTimestamps, points,
        _this = this;
      if (peaks.length > 100) {
        console.log("Too many peaks. Won't render.");
        return;
      }
      peakTimestamps = peaks.map(function(peak) {
        return peak.get('timestamp');
      });
      points = _.filter(this.chart.series[0].points, function(point) {
        return _.contains(peakTimestamps, point.x);
      });
      return _.forEach(points, function(point) {
        return point.update({
          marker: {
            enabled: true,
            symbol: 'circle',
            fillColor: color,
            lineColor: color,
            radius: 7
          }
        });
      });
    };

    return Result;

  })(Backbone.View);

}).call(this);
