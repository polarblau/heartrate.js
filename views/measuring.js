// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HeartrateJS.Views.Measuring = (function(_super) {

    __extends(Measuring, _super);

    function Measuring() {
      this._tick = __bind(this._tick, this);
      return Measuring.__super__.constructor.apply(this, arguments);
    }

    Measuring.prototype.el = '#container';

    Measuring.prototype.events = {
      'click a.cancel': '_cancel'
    };

    Measuring.prototype.initialize = function(options) {
      return this.template = _.template($('#tmpl-measuring').text());
    };

    Measuring.prototype.render = function() {
      this.$el.html(this.template());
      this._setupAndStartRecorder();
      this._setupAndStartTimer();
      return this;
    };

    Measuring.prototype._cancel = function(e) {
      if (this.interval != null) {
        return clearInterval(this.interval);
      }
    };

    Measuring.prototype._setupAndStartRecorder = function() {
      var _this = this;
      this.recorder = new HeartrateJS.Utils.Recorder({
        duration: HeartrateJS.Settings.measurementDuration,
        canvas: this.$el.find('canvas'),
        preview: this.$el.find('video')
      });
      this.buffer = [];
      return this.recorder.on('capture', function(data) {
        return _this.buffer.push(data);
      });
    };

    Measuring.prototype._setupAndStartTimer = function() {
      var threshold;
      this.start = (new Date).getTime();
      this.interval = setInterval(this._tick, 50);
      this.$progress = this.$el.find('.progress .progress-bar');
      this.measure = HeartrateJS.Settings.measurementDuration;
      this.wait = HeartrateJS.Settings.waitingDuration;
      this.duration = this.wait + this.measure;
      threshold = this.wait / this.duration * 100;
      return this.$progress.parent().find('.threshold').css({
        width: "" + threshold + "%"
      });
    };

    Measuring.prototype._tick = function() {
      var diff, now, percentage,
        _this = this;
      now = (new Date).getTime();
      diff = now - this.start;
      percentage = Math.round(diff / this.duration * 100);
      if (diff >= this.wait && !this.recorder.isStarted()) {
        this.recorder.start();
        this.$progress.removeClass('waiting');
      }
      if (diff >= this.duration) {
        this.recorder.stop();
        this.trigger('complete');
        _.forEach(this.buffer, function(data) {
          return _this.collection.add(new HeartrateJS.Models.DataPoint(data));
        });
        clearInterval(this.interval);
      }
      return this.$progress.css('width', "" + percentage + "%");
    };

    return Measuring;

  })(Backbone.View);

}).call(this);
