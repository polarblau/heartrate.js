// Generated by CoffeeScript 1.3.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.Orange) == null) {
    window.Orange = {};
  }

  Orange.Thread = (function() {

    function Thread() {
      this._workerResponse = __bind(this._workerResponse, this);
      this.idle = true;
    }

    Thread.prototype.perform = function(job) {
      this.job = job;
      if (this._worker != null) {
        if (this._worker.type !== this.job.type) {
          this._reassign();
        }
      } else {
        this._createWorker();
      }
      this.idle = false;
      return this._worker.postMessage({
        type: 'perform',
        data: this.job.data
      });
    };

    Thread.prototype._reassign = function() {
      this._worker.terminate();
      this._createWorker();
      return this;
    };

    Thread.prototype._createWorker = function() {
      this._worker = new Worker(this._workerPathForType(this.job.type));
      this._worker.onmessage = this._workerResponse;
      return this._worker.onerror = this._workerError;
    };

    Thread.prototype._workerResponse = function(event) {
      var data, type, _ref1;
      _ref1 = [event.data.type, event.data.data], type = _ref1[0], data = _ref1[1];
      switch (type) {
        case 'complete':
          this.job.trigger('complete', data);
          this.job = null;
          return this.idle = true;
        case 'log':
          return console.log(data.data);
        default:
          return console.log("Received worker message: " + type + ".", data);
      }
    };

    Thread.prototype._workerError = function(e) {
      throw new Error("Worker error: Line " + e.lineno + " in " + e.filename + ": " + e.message);
    };

    Thread.prototype._workerPathForType = function(type) {
      return [
        Orange.settings.workersPath, "" + (type.replace(/([A-Z])/g, function($1) {
          return "_" + $1.toLowerCase();
        })) + ".js"
      ].join('/').replace(/\/{2,}/, '/');
    };

    return Thread;

  })();

}).call(this);
