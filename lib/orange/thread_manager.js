// Generated by CoffeeScript 1.3.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.Orange) == null) {
    window.Orange = {};
  }

  Orange._ThreadManager = (function() {

    function _ThreadManager() {
      this._update = __bind(this._update, this);
      this.maxSize = 4;
      this.workersPath = '/lib/workers/';
      this._threads = [];
      Orange.Queue.on('job:pushed', this._update);
      Orange.Queue.on('job:completed', this._update);
    }

    _ThreadManager.prototype._update = function() {
      var idleThreads, job, thread;
      if (Orange.Queue.length > 0) {
        if (this._threads.length < Orange.settings.maxThreadPoolSize) {
          job = Orange.Queue.pop();
          thread = this._addThread();
          return thread.perform(job);
        } else if ((idleThreads = this._idleThreads()).length > 0) {
          job = Orange.Queue.pop();
          return idleThreads[0].perform(job);
        }
      }
    };

    _ThreadManager.prototype._addThread = function() {
      var thread;
      thread = new Orange.Thread;
      this._threads.push(thread);
      return thread;
    };

    _ThreadManager.prototype._idleThreads = function() {
      var t, _i, _len, _ref1, _results;
      _ref1 = this._threads;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        t = _ref1[_i];
        if (t.idle === true) {
          _results.push(t);
        }
      }
      return _results;
    };

    return _ThreadManager;

  })();

}).call(this);
